version: '3.8'

services:
  mqtt-broker:
    build:
      context: .
      dockerfile: Dockerfile
    image: integration-mqtt-broker
    container_name: mqtt-test-broker
    ports:
      - "8081:8080"  # –ò–∑–º–µ–Ω–∏—Ç—å —Å 8080 –Ω–∞ 8081
      - "8884:8883"  # TLS MQTT
      - "8444:8443"  # WSS
      - "1884:1883"  # Standard MQTT
    volumes:
      - ./certs:/app/certs:ro
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - MQTT_LOG_LEVEL=info
      - MQTT_PORT=1883
      - MQTT_TLS_PORT=8883
      - MQTT_WS_PORT=8080
      - MQTT_WSS_PORT=8443
    networks:
      - mqtt-test-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1883"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Main test server instance
  streaming-server-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: streaming-server-test
    environment:
      - HTTP_ADDR=:8080
      - HTTPS_ADDR=:8443
      - TCP_ADDR=:8081
      - TLS_ADDR=:8444
      - WS_ADDR=:8082
      - WSS_ADDR=:8445
      - LOG_LEVEL=info
      - TEST_MODE=true
      - DOCKER_COMPOSE_TEST=1
    volumes:
      - ./test-data:/app/test-data
      - ./certs:/app/certs:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 10s
    # –£–±–∏—Ä–∞–µ–º ports: - –ø–æ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  # Load test server instance
  streaming-server-load:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: streaming-server-load
    environment:
      - HTTP_ADDR=:8080
      - HTTPS_ADDR=:8443
      - TCP_ADDR=:8081
      - TLS_ADDR=:8444
      - WS_ADDR=:8082
      - WSS_ADDR=:8445
      - LOG_LEVEL=warn
      - TEST_MODE=true
      - LOAD_TEST=true
      - DOCKER_COMPOSE_TEST=1
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 10s
    # –£–±–∏—Ä–∞–µ–º ports: - –ø–æ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  # Performance test server instance
  streaming-server-perf:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: streaming-server-perf
    environment:
      - HTTP_ADDR=:8080
      - HTTPS_ADDR=:8443
      - TCP_ADDR=:8081
      - TLS_ADDR=:8444
      - WS_ADDR=:8082
      - WSS_ADDR=:8445
      - LOG_LEVEL=error
      - TEST_MODE=true
      - PERFORMANCE_TEST=true
      - DOCKER_COMPOSE_TEST=1
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 10s
    # –£–±–∏—Ä–∞–µ–º ports: - –ø–æ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  # Test client container for running integration tests
  test-client:
    build:
      context: .
      dockerfile: Dockerfile.test-client
    container_name: test-client
    depends_on:
      streaming-server-test:
        condition: service_healthy
      streaming-server-load:
        condition: service_healthy
      streaming-server-perf:
        condition: service_healthy
    environment:
      # Docker Compose networking - using service names and internal ports
      - TEST_SERVER_HTTP=http://streaming-server-test:8080
      - TEST_SERVER_HTTPS=https://streaming-server-test:8443
      - TEST_SERVER_WS=ws://streaming-server-test:8082
      - TEST_SERVER_WSS=wss://streaming-server-test:8445
      - TEST_SERVER_TCP=streaming-server-test:8081
      - TEST_SERVER_TLS=streaming-server-test:8444
      
      # Load testing endpoints
      - LOAD_SERVER_HTTP=http://streaming-server-load:8080
      - LOAD_SERVER_WS=ws://streaming-server-load:8082
      - LOAD_SERVER_TCP=streaming-server-load:8081
      
      # Performance testing endpoints
      - PERF_SERVER_HTTP=http://streaming-server-perf:8080
      - PERF_SERVER_WS=ws://streaming-server-perf:8082
      - PERF_SERVER_TCP=streaming-server-perf:8081
      
      # Test configuration
      - TEST_ISOLATION=docker
      - DOCKER_COMPOSE_TEST=1
      - QUIET_TESTS=0
    volumes:
      - ./test/integration:/app/test/integration
      - ./test-results:/app/test-results
      - ./certs:/app/certs:ro
    networks:
      - test-network
    command: >
      bash -c "
        echo 'üîç Waiting for services to be ready...' &&
        sleep 5 &&
        echo 'üß™ Running integration tests...' &&
        go test ./test/integration/... -v -failfast -timeout=300s
      "

  postgres:
    image: postgres:15-alpine
    container_name: mqtt-test-postgres
    environment:
      POSTGRES_DB: mqtt_test
      POSTGRES_USER: mqtt_user
      POSTGRES_PASSWORD: mqtt_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # –ò–∑–º–µ–Ω–∏—Ç—å —Å 5432 –Ω–∞ 5433 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./test/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mqtt-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mqtt_user -d mqtt_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: mqtt-test-redis
    ports:
      - "6380:6379"  # –ò–∑–º–µ–Ω–∏—Ç—å —Å 6379 –Ω–∞ 6380 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    networks:
      - mqtt-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  mqtt-test-network:
    driver: bridge
    name: mqttbroker31_mqtt-test-network
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: test-bridge

volumes:
  postgres_test_data:
    name: mqtt_test_postgres_data
  test-data:
