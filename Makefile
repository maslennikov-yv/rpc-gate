# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
GO := go
GOFLAGS := -v
GOOS ?= $(shell $(GO) env GOOS)
GOARCH ?= $(shell $(GO) env GOARCH)
GOPATH ?= $(shell $(GO) env GOPATH)
GOBIN ?= $(GOPATH)/bin
GOCMD := GOOS=$(GOOS) GOARCH=$(GOARCH) $(GO)

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
BIN_DIR := ./bin
CMD_DIR := ./cmd
PKG_DIR := ./pkg
TEST_DIR := ./test
SCRIPTS_DIR := ./scripts
CERTS_DIR := ./certs

# –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—É—Ç–∏ –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞–º
APP_NAME := streaming-server
SERVER_BINARY := $(BIN_DIR)/server
CLIENT_BINARY := $(BIN_DIR)/client

# –í–µ—Ä—Å–∏—è –∏ —Å–±–æ—Ä–∫–∞
VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_TIME ?= $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
COMMIT_HASH ?= $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
PROJECT_NAME ?= $(shell basename $(CURDIR) | tr '[:upper:]' '[:lower:]')

# Docker –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
DOCKER_COMPOSE := $(shell which docker-compose 2>/dev/null || echo "docker compose")
DOCKER_COMPOSE_DEV := $(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml

# –û–ø—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BAIL ?= false
TEST_FLAGS := $(if $(filter true,$(BAIL)),-failfast,)

# –û–ø—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
PROTOCOL ?= http
DEBUG ?= false
INTERACTIVE ?= true
METHOD ?= 
PARAMS ?= 
CLIENT_ARGS := $(if $(filter true,$(INTERACTIVE)),-interactive,) \
               $(if $(filter true,$(DEBUG)),-debug,) \
               $(if $(PROTOCOL),-protocol $(PROTOCOL),) \
               $(if $(METHOD),-method $(METHOD),) \
               $(if $(PARAMS),-params '$(PARAMS)',) \
               $(EXTRA_ARGS)

# –§–ª–∞–≥–∏ –ª–∏–Ω–∫–æ–≤—â–∏–∫–∞
LDFLAGS := -ldflags "-X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME) -X main.CommitHash=$(COMMIT_HASH)"

# –¶–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.PHONY: all help
all: clean setup build test

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
.DEFAULT_GOAL := help

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
.PHONY: check-docker-compose
check-docker-compose:
	@echo "      üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
	@if command -v docker-compose >/dev/null 2>&1; then \
		echo "      ‚úÖ –ù–∞–π–¥–µ–Ω docker-compose: $$(docker-compose --version)"; \
		$(eval DOCKER_COMPOSE := docker-compose) \
	elif docker compose version >/dev/null 2>&1; then \
		echo "      ‚úÖ –ù–∞–π–¥–µ–Ω docker compose: $$(docker compose version)"; \
		$(eval DOCKER_COMPOSE := docker compose) \
	else \
		echo "      ‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!"; \
		echo "      üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose:"; \
		echo "         - –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Docker: —É–∂–µ –≤–∫–ª—é—á–µ–Ω"; \
		echo "         - –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π: https://docs.docker.com/compose/install/"; \
		exit 1; \
	fi
	@$(eval DOCKER_COMPOSE_DEV := $(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
.PHONY: setup
setup: deps make-scripts-executable install-lint
	@echo "      üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
	@mkdir -p $(BIN_DIR)
	@$(SCRIPTS_DIR)/setup-deps.sh

# –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
.PHONY: make-scripts-executable
make-scripts-executable:
	@echo "      üîë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤..."
	@chmod +x $(SCRIPTS_DIR)/*.sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
.PHONY: check-and-fix-deps
check-and-fix-deps:
	@echo "      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	@if [ ! -f go.sum ]; then \
		echo "      ‚ö†Ô∏è  go.sum –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ..."; \
		$(MAKE) fix-checksums; \
	elif [ go.mod -nt go.sum ]; then \
		echo "      ‚ö†Ô∏è  go.mod –Ω–æ–≤–µ–µ go.sum, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."; \
		$(MAKE) fix-checksums; \
	elif ! $(GO) mod verify >/dev/null 2>&1; then \
		echo "      ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –Ω–µ –ø—Ä–æ—à–ª–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..."; \
		$(MAKE) fix-checksums; \
	else \
		echo "      ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"; \
		$(GO) mod download; \
	fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
.PHONY: deps
deps: check-and-fix-deps
	@echo "      üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
.PHONY: init-deps
init-deps: make-scripts-executable
	@echo "      üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	@$(SCRIPTS_DIR)/init-deps.sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
.PHONY: check-deps
check-deps: make-scripts-executable
	@echo "      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	@$(SCRIPTS_DIR)/check-deps.sh

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
.PHONY: build
build: check-and-fix-deps build-server build-client

# –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
.PHONY: build-server
build-server:
	@echo "      üèóÔ∏è –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
	@$(GOCMD) build $(GOFLAGS) $(LDFLAGS) -o $(SERVER_BINARY) $(CMD_DIR)/server/main.go

# –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
.PHONY: build-client
build-client:
	@echo "      üèóÔ∏è –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞..."
	@$(GOCMD) build $(GOFLAGS) $(LDFLAGS) -o $(CLIENT_BINARY) $(CMD_DIR)/client/main.go

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
.PHONY: run
run: check-and-fix-deps
	@echo "      üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
	@if [ ! -f $(CERTS_DIR)/server.crt ] || [ ! -f $(CERTS_DIR)/server.key ]; then \
		echo "      üîê –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–∏–µ..."; \
		$(MAKE) certs; \
	fi
	@if [ -f $(SERVER_BINARY) ]; then \
		echo "      üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫"; \
		TLS_CERT_FILE=$(CERTS_DIR)/server.crt TLS_KEY_FILE=$(CERTS_DIR)/server.key $(SERVER_BINARY); \
	else \
		echo "      üîÑ –ó–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"; \
		TLS_CERT_FILE=$(CERTS_DIR)/server.crt TLS_KEY_FILE=$(CERTS_DIR)/server.key $(GO) run $(CMD_DIR)/server/main.go; \
	fi

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
.PHONY: run-client
run-client: check-and-fix-deps
	@echo "      üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ ($(PROTOCOL))..."
	@if [ -f $(CLIENT_BINARY) ]; then \
		echo "      üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫"; \
		$(CLIENT_BINARY) $(CLIENT_ARGS); \
	else \
		echo "      üîÑ –ó–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"; \
		$(GO) run $(CMD_DIR)/client/main.go $(CLIENT_ARGS); \
	fi

# –ó–∞–ø—É—Å–∫ —Å air (–≥–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
.PHONY: dev
dev:
	@echo "      üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π..."
	@air -c air.toml

# –û—á–∏—Å—Ç–∫–∞
.PHONY: clean
clean:
	@echo "      üßπ –û—á–∏—Å—Ç–∫–∞..."
	@rm -rf $(BIN_DIR)
	@$(GO) clean -cache -testcache

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
.PHONY: certs
certs: make-scripts-executable
	@echo "      üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@$(SCRIPTS_DIR)/generate-certs.sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
.PHONY: verify-certs
verify-certs:
	@echo "      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@if [ -f $(CERTS_DIR)/server.crt ] && [ -f $(CERTS_DIR)/server.key ]; then \
		echo "      üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"; \
		openssl x509 -in $(CERTS_DIR)/server.crt -text -noout | head -20; \
		echo "      üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:"; \
		openssl rsa -in $(CERTS_DIR)/server.key -check -noout; \
		echo "      üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:"; \
		if [ "$$(openssl x509 -noout -modulus -in $(CERTS_DIR)/server.crt | openssl md5)" = "$$(openssl rsa -noout -modulus -in $(CERTS_DIR)/server.key | openssl md5)" ]; then \
			echo "      ‚úÖ –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É"; \
		else \
			echo "      ‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É"; \
		fi; \
	else \
		echo "      ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make certs'"; \
	fi

# –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
.PHONY: clean-certs
clean-certs:
	@echo "      üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@rm -rf $(CERTS_DIR)
	@echo "      ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã"

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
.PHONY: test-integration-with-certs
test-integration-with-certs: certs test-integration
	@echo "      üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å TLS
.PHONY: run-with-tls
run-with-tls: certs build-server
	@echo "      üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏..."
	@echo "      üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ $(CERTS_DIR)/"
	@TLS_CERT_FILE=$(CERTS_DIR)/server.crt TLS_KEY_FILE=$(CERTS_DIR)/server.key $(SERVER_BINARY)

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ—Ä—Ç–æ–≤
.PHONY: clean-test-env
clean-test-env: make-scripts-executable
	@echo "      üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@$(SCRIPTS_DIR)/cleanup-test-processes.sh

# –¢–µ—Å—Ç—ã
.PHONY: test
test: clean-test-env test-unit test-integration

# –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
.PHONY: test-unit
test-unit: check-and-fix-deps
	@echo "      üß™ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	@$(GO) test $(GOFLAGS) $(TEST_FLAGS) -race ./pkg/...

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
.PHONY: check-test-deps
check-test-deps:
	@echo "      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	@if ! $(GO) list -test ./test/integration/... >/dev/null 2>&1; then \
		echo "      ‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."; \
		$(GO) mod tidy; \
		$(GO) get -t ./test/integration/...; \
		$(GO) mod verify; \
	fi

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
.PHONY: test-integration
test-integration: check-and-fix-deps check-test-deps make-scripts-executable clean-test-env
	@echo "      üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	@$(SCRIPTS_DIR)/run-integration-tests.sh $(if $(filter true,$(BAIL)),--bail,)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ
.PHONY: test-integration-quiet
test-integration-quiet: check-and-fix-deps check-test-deps make-scripts-executable clean-test-env
	@echo "      üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ)..."
	@$(SCRIPTS_DIR)/run-integration-tests.sh --quiet $(if $(filter true,$(BAIL)),--bail,)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
.PHONY: test-safe
test-safe: check-and-fix-deps make-scripts-executable clean-test-env
	@echo "      üß™ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	@$(SCRIPTS_DIR)/run-tests-safe.sh $(if $(filter true,$(BAIL)),--bail,)

# Comprehensive tests
.PHONY: test-comprehensive
test-comprehensive: check-and-fix-deps check-test-deps make-scripts-executable certs clean-test-env
	@echo "      üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
	@$(SCRIPTS_DIR)/run-comprehensive-tests.sh $(if $(filter true,$(BAIL)),--bail,)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ golangci-lint
.PHONY: install-lint
install-lint:
	@echo "      üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ golangci-lint..."
	@if ! command -v golangci-lint >/dev/null 2>&1; then \
		echo "      üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ golangci-lint..."; \
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(shell go env GOPATH)/bin v1.55.2; \
	else \
		echo "      ‚úÖ golangci-lint —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi

# –õ–∏–Ω—Ç–∏–Ω–≥
.PHONY: lint
lint: check-and-fix-deps install-lint
	@echo "      üîç –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞..."
	@golangci-lint run ./...

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
.PHONY: fmt
fmt:
	@echo "      üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	@$(GO) fmt ./...

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
.PHONY: fix-checksums
fix-checksums:
	@echo "      üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º..."
	@rm -f go.sum
	@$(GO) mod tidy
	@$(GO) get -t ./...
	@$(GO) mod verify
	@echo "      ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"

# ==================== DOCKER COMMANDS ====================

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
.PHONY: docker-build
docker-build: check-docker-compose check-and-fix-deps certs
	@echo "      üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å Kafka..."
	@echo "      üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@echo "      üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $(DOCKER_COMPOSE)"
	@export VERSION=$(VERSION) BUILD_TIME=$(BUILD_TIME) COMMIT_HASH=$(COMMIT_HASH) PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) build --build-arg VERSION=$$VERSION --build-arg BUILD_TIME=$$BUILD_TIME --build-arg COMMIT_HASH=$$COMMIT_HASH
	@echo "      üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Kafka..."
	@export VERSION=$(VERSION) BUILD_TIME=$(BUILD_TIME) COMMIT_HASH=$(COMMIT_HASH) PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) up -d
	@echo "      ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:"
	@echo "         HTTP:  http://localhost:8080"
	@echo "         HTTPS: https://localhost:8443"
	@echo "         TCP:   localhost:8081"
	@echo "         TLS:   localhost:8444"
	@echo "         WS:    ws://localhost:8082"
	@echo "         WSS:   wss://localhost:8445"
	@echo "      üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: make docker-status"

# –†–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
.PHONY: docker-build-dev
docker-build-dev: check-docker-compose check-and-fix-deps certs
	@echo "      üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@export VERSION=$(VERSION) BUILD_TIME=$(BUILD_TIME) COMMIT_HASH=$(COMMIT_HASH) PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE_DEV) build --build-arg VERSION=$$VERSION --build-arg BUILD_TIME=$$BUILD_TIME --build-arg COMMIT_HASH=$$COMMIT_HASH
	@echo "      üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@export VERSION=$(VERSION) BUILD_TIME=$(BUILD_TIME) COMMIT_HASH=$(COMMIT_HASH) PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE_DEV) up -d
	@echo "      ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!"
	@echo "         Kafka UI: http://localhost:8090"

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Docker
.PHONY: docker-client
docker-client: check-docker-compose
	@echo "      üê≥ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Docker..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE_DEV) --profile client up streaming-client

# –°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–æ–≤
.PHONY: docker-status
docker-status: check-docker-compose
	@echo "      üìä –°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) ps
	@echo ""
	@echo "      üîç –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) logs --tail=10 streaming-server

# –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
.PHONY: docker-logs
docker-logs: check-docker-compose
	@echo "      üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) logs -f

# –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–∞
.PHONY: docker-logs-server
docker-logs-server: check-docker-compose
	@echo "      üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) logs -f streaming-server

# –õ–æ–≥–∏ Kafka
.PHONY: docker-logs-kafka
docker-logs-kafka: check-docker-compose
	@echo "      üìã –õ–æ–≥–∏ Kafka:"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) logs -f kafka

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
.PHONY: docker-stop
docker-stop: check-docker-compose
	@echo "      üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) stop
	@echo "      ‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
.PHONY: docker-restart
docker-restart: check-docker-compose
	@echo "      üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) restart
	@echo "      ‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"

# –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
.PHONY: docker-clean
docker-clean: check-docker-compose
	@echo "      üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) down -v --remove-orphans
	@docker system prune -f
	@echo "      ‚úÖ Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–∑—ã
.PHONY: docker-clean-all
docker-clean-all: check-docker-compose
	@echo "      üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) down -v --remove-orphans --rmi all
	@docker system prune -af --volumes
	@echo "      ‚úÖ –í—Å–µ Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
.PHONY: docker-stats
docker-stats:
	@echo "      üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker:"
	@docker stats

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
.PHONY: docker-health
docker-health: check-docker-compose
	@echo "      üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(DOCKER_COMPOSE) ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "      üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:"
	@curl -s http://localhost:8080/health || echo "‚ùå HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "‚úÖ HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# Docker —Ç–µ—Å—Ç—ã
.PHONY: docker-test
docker-test: check-and-fix-deps make-scripts-executable
	@echo "      üê≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker..."
	@export PROJECT_NAME=$(PROJECT_NAME) && \
	$(SCRIPTS_DIR)/docker-test.sh

# ==================== DOCUMENTATION COMMANDS ====================

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
.PHONY: docs
docs: check-and-fix-deps
	@echo "      üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@mkdir -p docs
	@$(GO) doc -all ./pkg/... > docs/api.md
	@echo "      ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ docs/api.md"

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
.PHONY: docs-serve
docs-serve: docs-html docs-css
	@echo "      üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@echo "      üöÄ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000"
	@echo "      üìö –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
	@cd docs && python3 -m http.server 8000 2>/dev/null || python -m SimpleHTTPServer 8000

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
.PHONY: docs-readme
docs-readme: check-and-fix-deps
	@echo "      üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤..."
	@for dir in $$(find pkg -type d -mindepth 1); do \
		if [ -n "$$(find $$dir -maxdepth 1 -name '*.go' -not -name '*_test.go')" ]; then \
			echo "      üìÑ –°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è $$dir..."; \
			pkg_name=$$(basename $$dir); \
			echo "# Package $$pkg_name" > $$dir/README.md; \
			echo "" >> $$dir/README.md; \
			echo "## –û–ø–∏—Å–∞–Ω–∏–µ" >> $$dir/README.md; \
			echo "" >> $$dir/README.md; \
			go doc -all ./$$dir 2>/dev/null | head -20 >> $$dir/README.md || echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ $$pkg_name" >> $$dir/README.md; \
			echo "" >> $$dir/README.md; \
			echo "## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" >> $$dir/README.md; \
			echo "" >> $$dir/README.md; \
			echo '\`\`\`go' >> $$dir/README.md; \
			echo "import \"streaming-server/$$dir\"" >> $$dir/README.md; \
			echo '\`\`\`' >> $$dir/README.md; \
		fi; \
	done
	@echo "      ‚úÖ README —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
.PHONY: docs-full
docs-full: docs docs-html docs-css docs-readme
	@echo "      üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!"
	@echo "      üìÅ –§–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:"
	@echo "         - docs/api.md (Markdown)"
	@echo "         - docs/api.html (HTML)"
	@echo "         - docs/style.css (CSS —Å—Ç–∏–ª–∏)"
	@echo "         - pkg/*/README.md (README –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞)"
	@echo "      üåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make docs-serve' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"

# –û—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
.PHONY: docs-clean
docs-clean:
	@echo "      üßπ –û—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@rm -rf docs/
	@find pkg -name "README.md" -delete
	@echo "      ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞"

# –ü–æ–º–æ—â—å
.PHONY: help
help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@echo "  üèóÔ∏è  –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫:"
	@echo "  make setup              - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  make build              - –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make run                - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)"
	@echo "  make run-client         - –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
	@echo "  make run-client PROTOCOL=ws    - –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make run-client PROTOCOL=tcp   - –ó–∞–ø—É—Å–∫ TCP –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make run-client PROTOCOL=https - –ó–∞–ø—É—Å–∫ HTTPS –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make run-client DEBUG=true     - –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"
	@echo "  make run-client METHOD=status  - –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–µ—Ç–æ–¥–æ–º status"
	@echo "  make run-with-tls       - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
	@echo "  make dev                - –ó–∞–ø—É—Å–∫ —Å –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π"
	@echo ""
	@echo "  üê≥ Docker –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make docker-build       - –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å Kafka (—Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞)"
	@echo "  make docker-build-dev   - –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Å Kafka UI)"
	@echo "  make docker-client      - –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Docker"
	@echo "  make docker-status      - –°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make docker-logs        - –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make docker-logs-server - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  make docker-logs-kafka  - –õ–æ–≥–∏ Kafka"
	@echo "  make docker-stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make docker-restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make docker-clean       - –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤"
	@echo "  make docker-clean-all   - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker"
	@echo "  make docker-stats       - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤"
	@echo "  make docker-health      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make docker-test        - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker"
	@echo ""
	@echo "  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
	@echo "  make test               - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  make test-unit          - –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  make test-integration   - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  make test-integration-quiet - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ"
	@echo "  make test-integration-with-certs - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
	@echo "  make test-safe          - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  make test-comprehensive - –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"
	@echo "  make test BAIL=true       - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ"
	@echo "  make test-unit BAIL=true  - –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ"
	@echo "  make test-integration BAIL=true - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ"
	@echo ""
	@echo "  üîê TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
	@echo "  make certs              - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
	@echo "  make verify-certs       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
	@echo "  make clean-certs        - –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
	@echo ""
	@echo "  üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:"
	@echo "  make clean              - –û—á–∏—Å—Ç–∫–∞"
	@echo "  make clean-test-env     - –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  make install-lint       - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ golangci-lint"
	@echo "  make lint               - –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞"
	@echo "  make fmt                - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  make fix-checksums      - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º"
	@echo ""
	@echo "  üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
	@echo "  make docs               - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
	@echo "  make docs-serve         - –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
	@echo "  make help               - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
