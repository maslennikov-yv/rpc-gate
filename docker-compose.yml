services:
  # Kafka and Zookeeper for logging
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: streaming-server-zookeeper-${PROJECT_NAME:-default}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: streaming-server-kafka-${PROJECT_NAME:-default}
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # NO ports exposed - Kafka is internal only

  # Main streaming server
  streaming-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=${VERSION:-dev}
        - BUILD_TIME=${BUILD_TIME:-unknown}
        - COMMIT_HASH=${COMMIT_HASH:-unknown}
    container_name: streaming-server-main-${PROJECT_NAME:-default}
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      # Server addresses (internal)
      - HTTP_ADDR=:8080
      - HTTPS_ADDR=:8443
      - TCP_ADDR=:8081
      - TLS_ADDR=:8444
      - WS_ADDR=:8082
      - WSS_ADDR=:8445
      
      # Kafka configuration (internal network)
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=rpc-requests
      
      # Logging configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_DESTINATION=kafka
      - LOG_SUCCESS_ONLY=false
      
      # Service information
      - SERVICE_NAME=streaming-server
      - SERVICE_VERSION=${VERSION:-1.0.0}
      - ENVIRONMENT=production
      
      # TLS configuration
      - TLS_CERT_FILE=/app/certs/server.crt
      - TLS_KEY_FILE=/app/certs/server.key
      
      # Performance tuning
      - READ_TIMEOUT=30s
      - WRITE_TIMEOUT=30s
      - IDLE_TIMEOUT=60s
      
      # Production flags
      - DEBUG=false
      - PROFILE=false
    ports:
      # Alternative ports to avoid conflicts
      - "8090:8080"   # HTTP
      - "8453:8443"   # HTTPS
      - "8091:8081"   # TCP
      - "8454:8444"   # TLS
      - "8092:8082"   # WebSocket
      - "8455:8445"   # WebSocket Secure
    volumes:
      - ./certs:/app/certs:ro
      - server_logs:/app/logs
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Optional: Kafka UI for monitoring (only in development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: streaming-server-kafka-ui-${PROJECT_NAME:-default}
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: streaming-server-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - internal-network
    profiles:
      - development
    # NO ports exposed in production
    # ports:
    #   - "8090:8080"  # Only enable for development
    restart: unless-stopped

networks:
  internal-network:
    driver: bridge
    name: streaming-server-network-${PROJECT_NAME:-default}

volumes:
  kafka_data:
    name: streaming_server_kafka_data_${PROJECT_NAME:-default}
  zookeeper_data:
    name: streaming_server_zookeeper_data_${PROJECT_NAME:-default}
  zookeeper_logs:
    name: streaming_server_zookeeper_logs_${PROJECT_NAME:-default}
  server_logs:
    name: streaming_server_logs_${PROJECT_NAME:-default}
